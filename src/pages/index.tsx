import Head from 'next/head'
import { useCallback, useEffect, useRef, useState, FormEvent } from 'react'
import { createFFmpeg, fetchFile, FFmpeg } from "@ffmpeg/ffmpeg";

function fname(file: File): string {
  if (file.name.indexOf('.') === -1) {
    return file.name;
  }

  const ext = file.name.slice(file.name.indexOf('.'));
  return `input${ext}`;
}

export default function Home() {
  const [state, setState] = useState<"initial"|"processing"|"done"|"error">("initial");

  const [ffmpeg, setFfmpeg] = useState<FFmpeg | null>(null);
  useEffect(() => {
    setFfmpeg(createFFmpeg({
      log: true,
      corePath: 'https://unpkg.com/@ffmpeg/core@0.10.0/dist/ffmpeg-core.js'
    }));
  }, [setFfmpeg]);

  const img = useRef<HTMLImageElement>(null);

  const [file, setFile] = useState<File | null>(null);
  useEffect(() => {
    if (!file || !ffmpeg) {
      return;
    }

    (async () => {
      if (!img.current) {
        return;
      }

      setState("processing");
      try {
        await ffmpeg?.load();
        const name = fname(file);
        ffmpeg.FS('writeFile', name, await fetchFile(file));
        await ffmpeg.run('-i', name, '-r', '10', 'output.gif');
        const data = ffmpeg.FS('readFile', 'output.gif');
        img.current.src = URL.createObjectURL(new Blob([data.buffer], { type: 'image/gif' }));
        setState("done");
      } catch (e) {
        setState("error");
        throw e;
      }

    })();
  }, [img, ffmpeg, file, setState]);

  const handler = useCallback((evt: FormEvent<HTMLInputElement>): any => {
    setFile(((evt.target as HTMLInputElement).files ?? [])[0]);
  }, [setFile]);

  return (
    <div>
      <Head>
        <title>intogif</title>
        <meta name="description" content="Generated by create next app" />
        <link
          rel="icon"
          href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text x=%2250%%22 y=%2250%%22 style=%22dominant-baseline:central;text-anchor:middle;font-size:90px;%22>ðŸŽ¥</text></svg>"
        />
      </Head>

      <main>
        {state === "initial" ? <input type="file" onInput={handler} accept="video/*"/> : null }
        {state === "processing" ? <div>processing...</div> : null }
        {state === "error" ? <div>ERROR OCCURRED.</div> : null }
        <img ref={img}/>
      </main>
    </div>
  )
}
